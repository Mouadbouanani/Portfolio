import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Github, ExternalLink, Loader, AlertCircle } from 'lucide-react';
import { GITHUB_CONFIG } from '../config/github';

export interface GitHubRepo {
  id: number;
  name: string;
  description: string;
  html_url: string;
  homepage: string | null;
  language: string;
  stargazers_count: number;
  forks_count: number;
  topics: string[];
  created_at: string;
  updated_at: string;
  fork: boolean;
}

type Project = GitHubRepo;

const Projects = () => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  const [technologies, setTechnologies] = useState<string[]>([]);
  const [activeFilter, setActiveFilter] = useState('All');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<string | null>(null);

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('📦 Loading repositories from static file...');

      // Fetch from static file (generated by GitHub Actions)
      const response = await fetch('/projects.json');

      if (!response.ok) {
        throw new Error('Failed to load projects file');
      }

      const data: Project[] = await response.json();

      console.log(`✅ Loaded ${data.length} repositories from cache`);

      setProjects(data);
      setFilteredProjects(data);

      // Calculate last updated time
      if (data.length > 0) {
        const mostRecent = data.reduce((latest, project) => {
          return new Date(project.updated_at) > new Date(latest.updated_at) ? project : latest;
        });
        setLastUpdated(mostRecent.updated_at);
      }

      // Extract unique technologies (keep all topics now)
      const allTopics = data.flatMap(p => p.topics || []);
      const uniqueTopics = Array.from(new Set(allTopics));
      setTechnologies(['All', ...uniqueTopics]);

    } catch (err) {
      console.error('❌ Error loading repositories:', err);
      setError('Failed to load repositories. The file may not exist yet. Please trigger the GitHub Action manually.');
    } finally {
      setLoading(false);
    }
  };

  const filterProjects = (tech: string) => {
    setActiveFilter(tech);
    if (tech === 'All') {
      setFilteredProjects(projects);
    } else {
      setFilteredProjects(projects.filter(p => p.topics?.includes(tech)));
    }
  };

  if (loading) {
    return (
        <section id="projects" className="py-20 px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-12">
              <h2 className="text-3xl md:text-4xl font-bold mb-4">All My Repositories</h2>
              <div className="flex justify-center">
                <Loader className="animate-spin text-secondary" size={48} />
              </div>
              <p className="mt-4 text-gray-400">Loading repositories...</p>
            </div>
          </div>
        </section>
    );
  }

  if (error) {
    return (
        <section id="projects" className="py-20 px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            <div className="text-center">
              <h2 className="text-3xl md:text-4xl font-bold mb-4">All My Repositories</h2>
              <div className="flex justify-center mb-4">
                <AlertCircle className="text-red-500" size={48} />
              </div>
              <p className="mt-4 text-red-500 font-semibold">{error}</p>
              <div className="mt-6 space-y-3">
                <p className="text-gray-400">
                  Please trigger the GitHub Action to generate the projects file:
                </p>
                <ol className="text-left max-w-md mx-auto text-sm text-gray-400 space-y-2">
                  <li>1. Go to the <strong>Actions</strong> tab in your repository</li>
                  <li>2. Click <strong>"Update Portfolio Projects"</strong></li>
                  <li>3. Click <strong>"Run workflow"</strong></li>
                  <li>4. Wait for it to complete</li>
                  <li>5. Refresh this page</li>
                </ol>
                <a
                    href={`https://github.com/${GITHUB_CONFIG.USERNAME}/${GITHUB_CONFIG.USERNAME}.github.io/actions`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 mt-4 px-6 py-3 bg-secondary hover:bg-secondary/80 rounded-lg transition-colors"
                >
                  <Github size={20} />
                  Go to GitHub Actions
                </a>
              </div>
            </div>
          </div>
        </section>
    );
  }

  if (projects.length === 0) {
    return (
        <section id="projects" className="py-20 px-4 sm:px-6 lg:px-8">
          <div className="max-w-7xl mx-auto">
            <div className="text-center">
              <h2 className="text-3xl md:text-4xl font-bold mb-4">All My Repositories</h2>
              <div className="bg-white/5 backdrop-blur-lg rounded-lg p-8 max-w-2xl mx-auto">
                <p className="text-gray-300 mb-4">No repositories found.</p>
                <p className="text-gray-400 text-sm mb-6">
                  The GitHub Action will automatically fetch all your repositories.
                </p>
                <div className="space-y-4">
                  <a
                      href={`https://github.com/${GITHUB_CONFIG.USERNAME}?tab=repositories`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-2 px-6 py-3 bg-secondary hover:bg-secondary/80 rounded-lg transition-colors"
                  >
                    <Github size={20} />
                    View My Repositories
                  </a>
                </div>
              </div>
            </div>
          </div>
        </section>
    );
  }

  return (
      <section id="projects" className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <motion.div
              initial={{ opacity: 0, y: 50 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
          >
            <h2 className="text-3xl md:text-4xl font-bold text-center mb-2">All My Repositories</h2>
            <p className="text-center text-gray-400 mb-2">
              Showing {filteredProjects.length} of {projects.length} {projects.length === 1 ? 'repository' : 'repositories'}
            </p>
            {lastUpdated && (
                <p className="text-center text-gray-500 text-sm mb-8">
                  Last updated: {new Date(lastUpdated).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
                </p>
            )}

            {/* Technology Filters */}
            {technologies.length > 1 && (
                <div className="flex justify-center flex-wrap gap-2 mb-12">
                  {technologies.map(tech => (
                      <button
                          key={tech}
                          onClick={() => filterProjects(tech)}
                          className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                              activeFilter === tech
                                  ? 'bg-secondary text-white shadow-lg shadow-secondary/50 scale-105'
                                  : 'bg-slate-800 text-gray-300 hover:bg-slate-700 hover:scale-105'
                          }`}
                      >
                        {tech}
                        {tech !== 'All' && (
                            <span className="ml-2 text-xs opacity-70">
                      ({projects.filter(p => p.topics?.includes(tech)).length})
                    </span>
                        )}
                      </button>
                  ))}
                </div>
            )}
          </motion.div>

          {/* Projects Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {filteredProjects.map((project, index) => (
                <motion.div
                    key={project.id}
                    className="bg-white/10 backdrop-blur-lg rounded-lg shadow-lg overflow-hidden transform hover:-translate-y-2 hover:shadow-2xl hover:shadow-secondary/20 transition-all duration-300 group"
                    initial={{ opacity: 0, y: 50 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    viewport={{ once: true }}
                >
                  <div className="p-6">
                    {/* Header */}
                    <div className="flex justify-between items-start mb-3">
                      <h3 className="text-xl font-bold text-white group-hover:text-secondary transition-colors">
                        {project.name}
                      </h3>
                      {project.language && (
                          <span className="bg-secondary/80 text-white text-xs font-semibold px-2.5 py-1 rounded-full whitespace-nowrap ml-2">
                      {project.language}
                    </span>
                      )}
                    </div>

                    {/* Description */}
                    <p className="text-gray-300 text-sm mb-4 line-clamp-3 min-h-[60px]">
                      {project.description}
                    </p>

                    {/* Topics - Show ALL topics now */}
                    {project.topics && project.topics.length > 0 && (
                        <div className="flex flex-wrap gap-2 mb-4">
                          {project.topics
                              .slice(0, 4)
                              .map(topic => (
                                  <span
                                      key={topic}
                                      className="bg-slate-700/80 text-gray-300 px-2 py-1 rounded-full text-xs hover:bg-slate-600 transition-colors"
                                  >
                          #{topic}
                        </span>
                              ))}
                          {project.topics.length > 4 && (
                              <span className="text-gray-400 text-xs self-center">
                        +{project.topics.length - 4}
                      </span>
                          )}
                        </div>
                    )}

                    {/* Stats & Links */}
                    <div className="flex justify-between items-center pt-4 border-t border-white/10">
                      <div className="flex items-center gap-4 text-gray-400 text-sm">
                        <span className="flex items-center gap-1">⭐ {project.stargazers_count}</span>
                        <span className="flex items-center gap-1">🔱 {project.forks_count}</span>
                      </div>

                      <div className="flex space-x-3">
                        <a
                            href={project.html_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-gray-300 hover:text-secondary transition-colors hover:scale-110"
                            title="View on GitHub"
                        >
                          <Github size={22} />
                        </a>
                        {project.homepage && (
                            <a
                                href={project.homepage}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-gray-300 hover:text-secondary transition-colors hover:scale-110"
                                title="Live Demo"
                            >
                              <ExternalLink size={22} />
                            </a>
                        )}
                      </div>
                    </div>

                    {/* Last Updated */}
                    <div className="mt-3 text-xs text-gray-500">
                      Updated: {new Date(project.updated_at).toLocaleDateString()}
                    </div>
                  </div>
                </motion.div>
            ))}
          </div>
        </div>
      </section>
  );
};

export default Projects;
