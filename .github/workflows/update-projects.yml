name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [main]      # Deploy on every push to main
  workflow_dispatch:       # Allow manual trigger
  schedule:
    - cron: '0 2 * * *'    # Daily at 2 AM UTC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      # ============================================
      # STEP 1: Checkout the repository
      # ============================================
      - name:  Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # ============================================
      # STEP 2: Setup Node.js
      # ============================================
      - name: âš™ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      # ============================================
      # STEP 3: Install jq for JSON processing
      # ============================================
      - name:  Install jq
        run: sudo apt-get install -y jq

      # ============================================
      # STEP 4: Fetch ALL GitHub repositories
      # ============================================
      - name:  Fetch GitHub repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo " Fetching ALL repositories for Mouadbouanani..."
          
          # Initialize empty array
          echo '[]' > temp_repos.json
          
          page=1
          per_page=100
          total_repos=0
          
          while true; do
            echo " Fetching page $page..."
          
            response=$(curl -s \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.mercy-preview+json" \
              "https://api.github.com/users/Mouadbouanani/repos?per_page=$per_page&page=$page&type=owner&sort=updated")
          
            if ! echo "$response" | jq empty 2>/dev/null; then
              echo " Invalid JSON response on page $page"
              break
            fi
          
            page_count=$(echo "$response" | jq 'length')
            echo " Found $page_count repositories on page $page"
          
            if [ "$page_count" -eq 0 ]; then
              echo " No more repositories found."
              break
            fi
          
            total_repos=$((total_repos + page_count))
          
            jq --argjson new_repos "$response" '. += $new_repos' temp_repos.json > temp_merged.json
            mv temp_merged.json temp_repos.json
          
            if [ "$page_count" -lt "$per_page" ]; then
              echo " Last page reached."
              break
            fi
          
            page=$((page + 1))
          
            if [ "$page" -gt 100 ]; then
              echo "âš  Safety limit reached (100 pages)."
              break
            fi
          
            sleep 1
          done
          
          echo " Total repositories fetched: $total_repos"
          
          #  CRITICAL: Create public directory FIRST
          echo " Creating public directory..."
          mkdir -p public
          
          # Format repositories
          jq '[.[] | {
            id: .id,
            name: .name,
            description: (if .description == null then "No description provided" else .description end),
            html_url: .html_url,
            homepage: .homepage,
            language: (if .language == null then "Not specified" else .language end),
            stargazers_count: .stargazers_count,
            forks_count: .forks_count,
            topics: (if .topics == null then [] else .topics end),
            created_at: .created_at,
            updated_at: .updated_at,
            fork: .fork
          }] | sort_by(.updated_at) | reverse' temp_repos.json > public/projects.json
          
          rm temp_repos.json
          
          PROJECT_COUNT=$(jq 'length' public/projects.json)
          echo " Created public/projects.json with $PROJECT_COUNT repositories"

      # ============================================
      # STEP 5: Commit projects.json to main branch
      # ============================================
      - name:  Commit projects.json to main
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/projects.json
          
          if git diff --staged --quiet; then
            echo "â„¹ No changes to commit"
          else
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            PROJECT_COUNT=$(jq 'length' public/projects.json)
            git commit -m " Update repositories ($PROJECT_COUNT repos) - $TIMESTAMP"
            git push
            echo " Committed projects.json to main branch"
          fi

      # ============================================
      # STEP 6: Install dependencies
      # ============================================
      - name:  Install dependencies
        run: npm ci

      # ============================================
      # STEP 7: Build the React application
      # ============================================
      - name:  Build application
        run: npm run build

      # ============================================
      # STEP 8: Verify build output
      # ============================================
      - name:  Verify build output
        run: |
          echo " Build directory contents:"
          ls -la dist/
          
          # Verify projects.json exists in dist
          if [ -f "dist/projects.json" ]; then
            echo " projects.json found in dist"
          else
            echo "âš  projects.json not found in dist, copying..."
            cp public/projects.json dist/
            echo " Copied projects.json to dist"
          fi
          
          echo ""
          echo " Projects in dist/projects.json:"
          jq 'length' dist/projects.json

      # ============================================
      # STEP 9: Deploy to GitHub Pages
      # ============================================
      - name:  Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: ' Deploy from main - ${{ github.sha }}'
          force_orphan: false

      # ============================================
      # STEP 10: Summary
      # ============================================
      - name:  Deployment Summary
        run: |
          echo "### ðŸŽ‰ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Repositories:** $(jq 'length' public/projects.json)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed to:** https://mouadbouanani.github.io/Portfolio/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Repositories Included:" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "- [\(.name)](\(.html_url)) - \(.description)"' public/projects.json >> $GITHUB_STEP_SUMMARY